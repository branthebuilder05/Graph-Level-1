import java.util.*;
public class Main
{
    static class Edge{
        int src;
        int dest;
        int wt;
        Edge(int src,int dest,int wt){
            this.src=src;
            this.dest=dest;
            this.wt=wt;
        }
    }
    
	public static void main(String[] args) {
		ArrayList<ArrayList<Edge>>graph=new ArrayList<ArrayList<Edge>>();
		
		int v=8;
		for(int i=0;i<v;i++)
		graph.add(new ArrayList<Edge>());
		
		        graph.get(0).add(new Edge(0,1,10));
			    graph.get(1).add(new Edge(1,0,10));
			    
			    graph.get(0).add(new Edge(0,2,10));
			    graph.get(2).add(new Edge(2,0,10));
			    
			    graph.get(2).add(new Edge(2,1,10));
			    graph.get(1).add(new Edge(1,2,10));
			    
			    graph.get(2).add(new Edge(2,3,10));
			    graph.get(3).add(new Edge(3,2,10));
			    
			     graph.get(3).add(new Edge(3,4,10));
			    graph.get(4).add(new Edge(4,3,10));
			    
			     graph.get(3).add(new Edge(3,5,10));
			    graph.get(5).add(new Edge(5,3,10));
			    
			     graph.get(5).add(new Edge(5,6,10));
			    graph.get(6).add(new Edge(6,5,10));
			    
			     graph.get(5).add(new Edge(5,7,10));
			    graph.get(7).add(new Edge(7,5,10));
			    
			     graph.get(6).add(new Edge(6,7,10));
			    graph.get(7).add(new Edge(7,6,10));
			    //end
			    
			    
				
				
				boolean visited[]=new boolean[v];
				Arrays.fill(visited,false);
				findAllPath(graph,0,6,visited,0+"");
			
				
	}
	
	public static void findAllPath(ArrayList<ArrayList<Edge>> graph,int src,int dest,boolean visited[],String psf){
	    //base 
	    if(src==dest){ System.out.println(psf);
	        return;
	    }
	
	    //choice
	    else{
	        visited[src]= true;
	        for(Edge ele:graph.get(src)){
	            if(visited[ele.dest]==false)
	            findAllPath(graph,ele.dest,dest,visited,psf+" "+ele.dest);
	        }
	        visited[src]=false;
	        
	        
	    }
	}

}
